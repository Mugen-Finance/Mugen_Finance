{
  "language": "Solidity",
  "sources": {
    "contracts/Mugen/Treasury.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IMugen} from \"../interfaces/IMugen.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {AggregatorPriceFeeds} from \"../interfaces/AggregatorPriceFeeds.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {BancorFormula} from \"../Bancor/BancorFormula.sol\";\nimport {ITreasury} from \"../interfaces/ITreasury.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract Treasury is BancorFormula, ITreasury, Ownable, ReentrancyGuard {\n    IMugen public immutable mugen;\n    address public immutable treasury;\n\n    mapping(IERC20 => bool) public depositableTokens;\n    mapping(IERC20 => AggregatorPriceFeeds) public priceFeeds;\n\n    using SafeERC20 for IERC20;\n\n    uint256 public constant SCALE = 10**18;\n    uint256 public reserveBalance = 10 * SCALE;\n    uint256 public constant RESERVE_RATIO = 800000;\n    uint256 public valueDeposited;\n    uint256 public s_totalSupply;\n    uint256 public depositCap;\n    uint256 internal constant VALID_PERIOD = 1 days;\n    uint256 internal constant MIN_VALUE = 50 * 10**18;\n    address public administrator;\n    address public Communicator;\n    bool public adminRemoved = false;\n\n    error NotDepositable();\n    error NotUpdated();\n    error InvalidPrice();\n    error NotOwner();\n    error NotCommunicator();\n    error UnderMinDeposit();\n    error CapReached();\n    error AdminRemoved();\n\n    constructor(\n        address _mugen,\n        address _treasury,\n        address _administrator\n    ) {\n        mugen = IMugen(_mugen);\n        treasury = _treasury;\n        s_totalSupply += 1e18;\n        administrator = _administrator;\n    }\n\n    /**************************/\n    /***  Staker Functions ****/\n    /**************************/\n\n    /**\n     * @dev allows for users to deposit whitelisted assets and calculates their USD value for the bonding curve\n     * given that the cap is not reached yet.\n     * @param _token the token which is to be deposited\n     * @param _amount the amount for this particular deposit\n     */\n\n    function deposit(IERC20Metadata _token, uint256 _amount)\n        external\n        nonReentrant\n        depositable(_token)\n        Capped\n    {\n        uint256 amount = _amount;\n        if (IERC20Metadata(_token).decimals() < 18) {\n            uint256 dec = 18 - (IERC20Metadata(_token).decimals());\n            amount = _amount * 10**dec;\n        }\n        require(amount > 0, \"Deposit must be more than 0\");\n        uint256 tokenPrice = getPrice(_token);\n        uint256 value = (tokenPrice * amount) /\n            10**(priceFeeds[_token].decimals());\n        require(value >= MIN_VALUE, \"less than min deposit\");\n        uint256 calculated = _continuousMint(amount);\n        s_totalSupply += calculated;\n        valueDeposited += value;\n        emit Deposit(msg.sender, _token, value);\n        IERC20(_token).safeTransferFrom(msg.sender, treasury, _amount);\n        mugen.mint(msg.sender, calculated);\n    }\n\n    function receiveMessage(uint256 _amount)\n        external\n        override\n        returns (uint256)\n    {\n        if (msg.sender != Communicator) revert NotCommunicator();\n        uint256 test = _continuousMint(_amount);\n        s_totalSupply += test;\n        return test;\n    }\n\n    /**************************/\n    /****  Admin Functions ****/\n    /**************************/\n\n    function addTokenInfo(IERC20 _token, address _pricefeed) external {\n        if (msg.sender != owner() || msg.sender != administrator)\n            revert NotOwner();\n        priceFeeds[_token] = AggregatorPriceFeeds(_pricefeed);\n        depositableTokens[_token] = true;\n        emit DepositableToken(_token, _pricefeed);\n    }\n\n    function removeTokenInfo(IERC20 _token) external {\n        if (msg.sender != owner() || msg.sender != administrator)\n            revert NotOwner();\n        delete depositableTokens[_token];\n        delete priceFeeds[_token];\n        emit TokenRemoved(_token);\n    }\n\n    function setCommunicator(address _comms) external {\n        if (msg.sender != owner() || msg.sender != administrator)\n            revert NotOwner();\n        Communicator = _comms;\n    }\n\n    function setCap(uint256 _amount) external {\n        if (msg.sender != owner() || msg.sender != administrator)\n            revert NotOwner();\n        depositCap = _amount;\n    }\n\n    function setAdministrator(address newAdmin) external {\n        if (adminRemoved != false) revert AdminRemoved();\n        require(\n            msg.sender == owner() || msg.sender == administrator,\n            \"not the owner\"\n        );\n        administrator = newAdmin;\n    }\n\n    function removeAdmin() external onlyOwner {\n        administrator = address(0);\n        adminRemoved = true;\n    }\n\n    /*************************/\n    /****  View Functions ****/\n    /*************************/\n\n    function getPrice(IERC20 _token) internal view returns (uint256) {\n        (, int256 price, , uint256 updatedAt, ) = priceFeeds[_token]\n            .latestRoundData();\n        if (block.timestamp - updatedAt > VALID_PERIOD) revert NotUpdated();\n        if (price <= 0) revert InvalidPrice();\n        return uint256(price);\n    }\n\n    function readSupply() external view returns (uint256) {\n        return s_totalSupply;\n    }\n\n    function checkDepositable(IERC20 _token) external view returns (bool) {\n        return depositableTokens[_token];\n    }\n\n    function pricePerToken() external view returns (uint256) {\n        uint256 _price = (100 * 1e18) / calculateContinuousMintReturn(1e18);\n        return _price;\n    }\n\n    /**************************/\n    /*** Modifier Functions ***/\n    /**************************/\n\n    modifier depositable(IERC20 _token) {\n        if (depositableTokens[_token] != true) revert NotDepositable();\n        _;\n    }\n\n    modifier Capped() {\n        if (depositCap < valueDeposited) revert CapReached();\n        _;\n    }\n\n    /**************************/\n    /**** Bancor Functions ****/\n    /**************************/\n\n    function calculateContinuousMintReturn(uint256 _amount)\n        public\n        view\n        returns (uint256 mintAmount)\n    {\n        return\n            purchaseTargetAmount(\n                s_totalSupply,\n                reserveBalance,\n                uint32(RESERVE_RATIO),\n                _amount\n            );\n    }\n\n    function _continuousMint(uint256 _deposit) internal returns (uint256) {\n        uint256 amount = calculateContinuousMintReturn(_deposit);\n        reserveBalance += _deposit;\n        return amount;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IMugen.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IOFTCore.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Interface of the OFT standard\n */\ninterface IMugen is IOFTCore, IERC20 {\n    function mint(address _to, uint256 amount_) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorPriceFeeds.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorPriceFeeds {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function getPrice() external view returns (int256);\n\n    function usdPrice() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/Bancor/BancorFormula.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IBancorFormula.sol\";\nimport \"./Power.sol\";\n\ncontract BancorFormula is IBancorFormula, Power {\n    using SafeMath for uint256;\n\n    uint256 private constant ONE = 1;\n    uint32 private constant MAX_WEIGHT = 1000000;\n    uint8 private constant MIN_PRECISION = 32;\n    uint8 private constant MAX_PRECISION = 127;\n\n    // Auto-generated via 'PrintMaxExpArray.py'\n    uint256[128] private maxExpArray;\n\n    /**\n     * @dev should be executed after construction (too large for the constructor)\n     */\n    function init() public {\n        initMaxExpArray();\n        // initLambertArray();\n    }\n\n    /**\n     * @dev given a token supply, reserve balance, weight and a deposit amount (in the reserve token),\n     * calculates the target amount for a given conversion (in the main token)\n     *\n     * Formula:\n     * return = _supply * ((1 + _amount / _reserveBalance) ^ (_reserveWeight / 1000000) - 1)\n     *\n     * @param _supply          liquid token supply\n     * @param _reserveBalance  reserve balance\n     * @param _reserveWeight   reserve weight, represented in ppm (1-1000000)\n     * @param _amount          amount of reserve tokens to get the target amount for\n     *\n     * @return target\n     */\n    function purchaseTargetAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveWeight,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(\n            _reserveWeight > 0 && _reserveWeight <= MAX_WEIGHT,\n            \"ERR_INVALID_RESERVE_WEIGHT\"\n        );\n\n        // special case for 0 deposit amount\n        if (_amount == 0) return 0;\n\n        // special case if the weight = 100%\n        if (_reserveWeight == MAX_WEIGHT)\n            return _supply.mul(_amount) / _reserveBalance;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _amount.add(_reserveBalance);\n        (result, precision) = power(\n            baseN,\n            _reserveBalance,\n            _reserveWeight,\n            MAX_WEIGHT\n        );\n        uint256 temp = _supply.mul(result) >> precision;\n        return temp - _supply;\n    }\n\n    /**\n     * @dev given a token supply, reserve balance, weight and a sell amount (in the main token),\n     * calculates the target amount for a given conversion (in the reserve token)\n     *\n     * Formula:\n     * return = _reserveBalance * (1 - (1 - _amount / _supply) ^ (1000000 / _reserveWeight))\n     *\n     * @param _supply          liquid token supply\n     * @param _reserveBalance  reserve balance\n     * @param _reserveWeight   reserve weight, represented in ppm (1-1000000)\n     * @param _amount          amount of liquid tokens to get the target amount for\n     *\n     * @return reserve token amount\n     */\n    function saleTargetAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveWeight,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(\n            _reserveWeight > 0 && _reserveWeight <= MAX_WEIGHT,\n            \"ERR_INVALID_RESERVE_WEIGHT\"\n        );\n        require(_amount <= _supply, \"ERR_INVALID_AMOUNT\");\n\n        // special case for 0 sell amount\n        if (_amount == 0) return 0;\n\n        // special case for selling the entire supply\n        if (_amount == _supply) return _reserveBalance;\n\n        // special case if the weight = 100%\n        if (_reserveWeight == MAX_WEIGHT)\n            return _reserveBalance.mul(_amount) / _supply;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseD = _supply - _amount;\n        (result, precision) = power(_supply, baseD, MAX_WEIGHT, _reserveWeight);\n        uint256 temp1 = _reserveBalance.mul(result);\n        uint256 temp2 = _reserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev given two reserve balances/weights and a sell amount (in the first reserve token),\n     * calculates the target amount for a conversion from the source reserve token to the target reserve token\n     *\n     * Formula:\n     * return = _targetReserveBalance * (1 - (_sourceReserveBalance / (_sourceReserveBalance + _amount)) ^ (_sourceReserveWeight / _targetReserveWeight))\n     *\n     * @param _sourceReserveBalance    source reserve balance\n     * @param _sourceReserveWeight     source reserve weight, represented in ppm (1-1000000)\n     * @param _targetReserveBalance    target reserve balance\n     * @param _targetReserveWeight     target reserve weight, represented in ppm (1-1000000)\n     * @param _amount                  source reserve amount\n     *\n     * @return target reserve amount\n     */\n    function crossReserveTargetAmount(\n        uint256 _sourceReserveBalance,\n        uint32 _sourceReserveWeight,\n        uint256 _targetReserveBalance,\n        uint32 _targetReserveWeight,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(\n            _sourceReserveBalance > 0 && _targetReserveBalance > 0,\n            \"ERR_INVALID_RESERVE_BALANCE\"\n        );\n        require(\n            _sourceReserveWeight > 0 &&\n                _sourceReserveWeight <= MAX_WEIGHT &&\n                _targetReserveWeight > 0 &&\n                _targetReserveWeight <= MAX_WEIGHT,\n            \"ERR_INVALID_RESERVE_WEIGHT\"\n        );\n\n        // special case for equal weights\n        if (_sourceReserveWeight == _targetReserveWeight)\n            return\n                _targetReserveBalance.mul(_amount) /\n                _sourceReserveBalance.add(_amount);\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _sourceReserveBalance.add(_amount);\n        (result, precision) = power(\n            baseN,\n            _sourceReserveBalance,\n            _sourceReserveWeight,\n            _targetReserveWeight\n        );\n        uint256 temp1 = _targetReserveBalance.mul(result);\n        uint256 temp2 = _targetReserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev given a pool token supply, reserve balance, reserve ratio and an amount of requested pool tokens,\n     * calculates the amount of reserve tokens required for purchasing the given amount of pool tokens\n     *\n     * Formula:\n     * return = _reserveBalance * (((_supply + _amount) / _supply) ^ (MAX_WEIGHT / _reserveRatio) - 1)\n     *\n     * @param _supply          pool token supply\n     * @param _reserveBalance  reserve balance\n     * @param _reserveRatio    reserve ratio, represented in ppm (2-2000000)\n     * @param _amount          requested amount of pool tokens\n     *\n     * @return reserve token amount\n     */\n    function fundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(\n            _reserveRatio > 1 && _reserveRatio <= MAX_WEIGHT * 2,\n            \"ERR_INVALID_RESERVE_RATIO\"\n        );\n\n        // special case for 0 amount\n        if (_amount == 0) return 0;\n\n        // special case if the reserve ratio = 100%\n        if (_reserveRatio == MAX_WEIGHT)\n            return (_amount.mul(_reserveBalance) - 1) / _supply + 1;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _supply.add(_amount);\n        (result, precision) = power(baseN, _supply, MAX_WEIGHT, _reserveRatio);\n        uint256 temp = ((_reserveBalance.mul(result) - 1) >> precision) + 1;\n        return temp - _reserveBalance;\n    }\n\n    /**\n     * @dev given a pool token supply, reserve balance, reserve ratio and an amount of reserve tokens to fund with,\n     * calculates the amount of pool tokens received for purchasing with the given amount of reserve tokens\n     *\n     * Formula:\n     * return = _supply * ((_amount / _reserveBalance + 1) ^ (_reserveRatio / MAX_WEIGHT) - 1)\n     *\n     * @param _supply          pool token supply\n     * @param _reserveBalance  reserve balance\n     * @param _reserveRatio    reserve ratio, represented in ppm (2-2000000)\n     * @param _amount          amount of reserve tokens to fund with\n     *\n     * @return pool token amount\n     */\n    function fundSupplyAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(\n            _reserveRatio > 1 && _reserveRatio <= MAX_WEIGHT * 2,\n            \"ERR_INVALID_RESERVE_RATIO\"\n        );\n\n        // special case for 0 amount\n        if (_amount == 0) return 0;\n\n        // special case if the reserve ratio = 100%\n        if (_reserveRatio == MAX_WEIGHT)\n            return _amount.mul(_supply) / _reserveBalance;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseN = _reserveBalance.add(_amount);\n        (result, precision) = power(\n            baseN,\n            _reserveBalance,\n            _reserveRatio,\n            MAX_WEIGHT\n        );\n        uint256 temp = _supply.mul(result) >> precision;\n        return temp - _supply;\n    }\n\n    /**\n     * @dev given a pool token supply, reserve balance, reserve ratio and an amount of pool tokens to liquidate,\n     * calculates the amount of reserve tokens received for selling the given amount of pool tokens\n     *\n     * Formula:\n     * return = _reserveBalance * (1 - ((_supply - _amount) / _supply) ^ (MAX_WEIGHT / _reserveRatio))\n     *\n     * @param _supply          pool token supply\n     * @param _reserveBalance  reserve balance\n     * @param _reserveRatio    reserve ratio, represented in ppm (2-2000000)\n     * @param _amount          amount of pool tokens to liquidate\n     *\n     * @return reserve token amount\n     */\n    function liquidateReserveAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) public view override returns (uint256) {\n        // validate input\n        require(_supply > 0, \"ERR_INVALID_SUPPLY\");\n        require(_reserveBalance > 0, \"ERR_INVALID_RESERVE_BALANCE\");\n        require(\n            _reserveRatio > 1 && _reserveRatio <= MAX_WEIGHT * 2,\n            \"ERR_INVALID_RESERVE_RATIO\"\n        );\n        require(_amount <= _supply, \"ERR_INVALID_AMOUNT\");\n\n        // special case for 0 amount\n        if (_amount == 0) return 0;\n\n        // special case for liquidating the entire supply\n        if (_amount == _supply) return _reserveBalance;\n\n        // special case if the reserve ratio = 100%\n        if (_reserveRatio == MAX_WEIGHT)\n            return _amount.mul(_reserveBalance) / _supply;\n\n        uint256 result;\n        uint8 precision;\n        uint256 baseD = _supply - _amount;\n        (result, precision) = power(_supply, baseD, MAX_WEIGHT, _reserveRatio);\n        uint256 temp1 = _reserveBalance.mul(result);\n        uint256 temp2 = _reserveBalance << precision;\n        return (temp1 - temp2) / result;\n    }\n\n    /**\n     * @dev The arbitrage incentive is to convert to the point where the on-chain price is equal to the off-chain price.\n     * We want this operation to also impact the primary reserve balance becoming equal to the primary reserve staked balance.\n     * In other words, we want the arbitrager to convert the difference between the reserve balance and the reserve staked balance.\n     *\n     * Formula input:\n     * - let t denote the primary reserve token staked balance\n     * - let s denote the primary reserve token balance\n     * - let r denote the secondary reserve token balance\n     * - let q denote the numerator of the rate between the tokens\n     * - let p denote the denominator of the rate between the tokens\n     * Where p primary tokens are equal to q secondary tokens\n     *\n     * Formula output:\n     * - compute x = W(t / r * q / p * log(s / t)) / log(s / t)\n     * - return x / (1 + x) as the weight of the primary reserve token\n     * - return 1 / (1 + x) as the weight of the secondary reserve token\n     * Where W is the Lambert W Function\n     *\n     * If the rate-provider provides the rates for a common unit, for example:\n     * - P = 2 ==> 2 primary reserve tokens = 1 ether\n     * - Q = 3 ==> 3 secondary reserve tokens = 1 ether\n     * Then you can simply use p = P and q = Q\n     *\n     * If the rate-provider provides the rates for a single unit, for example:\n     * - P = 2 ==> 1 primary reserve token = 2 ethers\n     * - Q = 3 ==> 1 secondary reserve token = 3 ethers\n     * Then you can simply use p = Q and q = P\n     *\n     * @param _primaryReserveStakedBalance the primary reserve token staked balance\n     * @param _primaryReserveBalance       the primary reserve token balance\n     * @param _secondaryReserveBalance     the secondary reserve token balance\n     * @param _reserveRateNumerator        the numerator of the rate between the tokens\n     * @param _reserveRateDenominator      the denominator of the rate between the tokens\n     *\n     * Note that `numerator / denominator` should represent the amount of secondary tokens equal to one primary token\n     *\n     * @return the weight of the primary reserve token and the weight of the secondary reserve token, both in ppm (0-1000000)\n     */\n    // function balancedWeights(\n    //     uint256 _primaryReserveStakedBalance,\n    //     uint256 _primaryReserveBalance,\n    //     uint256 _secondaryReserveBalance,\n    //     uint256 _reserveRateNumerator,\n    //     uint256 _reserveRateDenominator\n    // ) public view override returns (uint32, uint32) {\n    //     if (_primaryReserveStakedBalance == _primaryReserveBalance)\n    //         require(\n    //             _primaryReserveStakedBalance > 0 ||\n    //                 _secondaryReserveBalance > 0,\n    //             \"ERR_INVALID_RESERVE_BALANCE\"\n    //         );\n    //     else\n    //         require(\n    //             _primaryReserveStakedBalance > 0 &&\n    //                 _primaryReserveBalance > 0 &&\n    //                 _secondaryReserveBalance > 0,\n    //             \"ERR_INVALID_RESERVE_BALANCE\"\n    //         );\n    //     require(\n    //         _reserveRateNumerator > 0 && _reserveRateDenominator > 0,\n    //         \"ERR_INVALID_RESERVE_RATE\"\n    //     );\n\n    //     uint256 tq = _primaryReserveStakedBalance.mul(_reserveRateNumerator);\n    //     uint256 rp = _secondaryReserveBalance.mul(_reserveRateDenominator);\n\n    //     if (_primaryReserveStakedBalance < _primaryReserveBalance)\n    //         return\n    //             balancedWeightsByStake(\n    //                 _primaryReserveBalance,\n    //                 _primaryReserveStakedBalance,\n    //                 tq,\n    //                 rp,\n    //                 true\n    //             );\n\n    //     if (_primaryReserveStakedBalance > _primaryReserveBalance)\n    //         return\n    //             balancedWeightsByStake(\n    //                 _primaryReserveStakedBalance,\n    //                 _primaryReserveBalance,\n    //                 tq,\n    //                 rp,\n    //                 false\n    //             );\n\n    //     return normalizedWeights(tq, rp);\n    // }\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITreasury {\n    event Deposit(\n        address indexed _depositor,\n        IERC20 indexed _token,\n        uint256 _value\n    );\n    event DepositableToken(IERC20 indexed _token, address indexed _priceFreed);\n    event TokenRemoved(IERC20 indexed _token);\n\n    function receiveMessage(uint256 x) external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTCore is IERC165 {\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint256 _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes calldata _toAddress,\n        uint256 _amount,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint256);\n\n    /**\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n     * `_nonce` is the outbound nonce\n     */\n    event SendToChain(\n        address indexed _sender,\n        uint16 indexed _dstChainId,\n        bytes indexed _toAddress,\n        uint256 _amount,\n        uint64 _nonce\n    );\n\n    /**\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\n     * `_nonce` is the inbound nonce.\n     */\n    event ReceiveFromChain(\n        uint16 indexed _srcChainId,\n        bytes indexed _srcAddress,\n        address indexed _toAddress,\n        uint256 _amount,\n        uint64 _nonce\n    );\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Bancor/IBancorFormula.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n    Bancor Formula interface\n*/\ninterface IBancorFormula {\n    function purchaseTargetAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveWeight,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function saleTargetAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveWeight,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function crossReserveTargetAmount(\n        uint256 _sourceReserveBalance,\n        uint32 _sourceReserveWeight,\n        uint256 _targetReserveBalance,\n        uint32 _targetReserveWeight,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function fundCost(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function fundSupplyAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    function liquidateReserveAmount(\n        uint256 _supply,\n        uint256 _reserveBalance,\n        uint32 _reserveRatio,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    // function balancedWeights(\n    //     uint256 _primaryReserveStakedBalance,\n    //     uint256 _primaryReserveBalance,\n    //     uint256 _secondaryReserveBalance,\n    //     uint256 _reserveRateNumerator,\n    //     uint256 _reserveRateDenominator\n    // ) external view returns (uint32, uint32);\n}\n"
    },
    "contracts/Bancor/Power.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Power {\n    using SafeMath for uint256;\n\n    uint256 private constant ONE = 1;\n    uint32 private constant MAX_WEIGHT = 1000000;\n    uint8 private constant MIN_PRECISION = 32;\n    uint8 private constant MAX_PRECISION = 127;\n\n    // Auto-generated via 'PrintIntScalingFactors.py'\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\n\n    // Auto-generated via 'PrintLn2ScalingFactors.py'\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\n    uint256 private constant LN2_DENOMINATOR =\n        0x5b9de1d10bf4103d647b0955897ba80;\n\n    // Auto-generated via 'PrintFunctionOptimalLog.py' and 'PrintFunctionOptimalExp.py'\n    uint256 private constant OPT_LOG_MAX_VAL =\n        0x15bf0a8b1457695355fb8ac404e7a79e3;\n    uint256 private constant OPT_EXP_MAX_VAL =\n        0x800000000000000000000000000000000;\n\n    // Auto-generated via 'PrintLambertFactors.py'\n    uint256 private constant LAMBERT_CONV_RADIUS =\n        0x002f16ac6c59de6f8d5d6f63c1482a7c86;\n    uint256 private constant LAMBERT_POS2_SAMPLE =\n        0x0003060c183060c183060c183060c18306;\n    uint256 private constant LAMBERT_POS2_MAXVAL =\n        0x01af16ac6c59de6f8d5d6f63c1482a7c80;\n    uint256 private constant LAMBERT_POS3_MAXVAL =\n        0x6b22d43e72c326539cceeef8bb48f255ff;\n\n    // Auto-generated via 'PrintWeightFactors.py'\n    uint256 private constant MAX_UNF_WEIGHT =\n        0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\n\n    // Auto-generated via 'PrintMaxExpArray.py'\n    uint256[128] private maxExpArray;\n\n    function initMaxExpArray() public {\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\n    }\n\n    // Auto-generated via 'PrintLambertArray.py'\n    // uint256[128] private lambertArray;\n\n    // function initLambertArray() public {\n    //     lambertArray[0] = 0x60e393c68d20b1bd09deaabc0373b9c5;\n    //     lambertArray[1] = 0x5f8f46e4854120989ed94719fb4c2011;\n    //     lambertArray[2] = 0x5e479ebb9129fb1b7e72a648f992b606;\n    //     lambertArray[3] = 0x5d0bd23fe42dfedde2e9586be12b85fe;\n    //     lambertArray[4] = 0x5bdb29ddee979308ddfca81aeeb8095a;\n    //     lambertArray[5] = 0x5ab4fd8a260d2c7e2c0d2afcf0009dad;\n    //     lambertArray[6] = 0x5998b31359a55d48724c65cf09001221;\n    //     lambertArray[7] = 0x5885bcad2b322dfc43e8860f9c018cf5;\n    //     lambertArray[8] = 0x577b97aa1fe222bb452fdf111b1f0be2;\n    //     lambertArray[9] = 0x5679cb5e3575632e5baa27e2b949f704;\n    //     lambertArray[10] = 0x557fe8241b3a31c83c732f1cdff4a1c5;\n    //     lambertArray[11] = 0x548d868026504875d6e59bbe95fc2a6b;\n    //     lambertArray[12] = 0x53a2465ce347cf34d05a867c17dd3088;\n    //     lambertArray[13] = 0x52bdce5dcd4faed59c7f5511cf8f8acc;\n    //     lambertArray[14] = 0x51dfcb453c07f8da817606e7885f7c3e;\n    //     lambertArray[15] = 0x5107ef6b0a5a2be8f8ff15590daa3cce;\n    //     lambertArray[16] = 0x5035f241d6eae0cd7bacba119993de7b;\n    //     lambertArray[17] = 0x4f698fe90d5b53d532171e1210164c66;\n    //     lambertArray[18] = 0x4ea288ca297a0e6a09a0eee240e16c85;\n    //     lambertArray[19] = 0x4de0a13fdcf5d4213fc398ba6e3becde;\n    //     lambertArray[20] = 0x4d23a145eef91fec06b06140804c4808;\n    //     lambertArray[21] = 0x4c6b5430d4c1ee5526473db4ae0f11de;\n    //     lambertArray[22] = 0x4bb7886c240562eba11f4963a53b4240;\n    //     lambertArray[23] = 0x4b080f3f1cb491d2d521e0ea4583521e;\n    //     lambertArray[24] = 0x4a5cbc96a05589cb4d86be1db3168364;\n    //     lambertArray[25] = 0x49b566d40243517658d78c33162d6ece;\n    //     lambertArray[26] = 0x4911e6a02e5507a30f947383fd9a3276;\n    //     lambertArray[27] = 0x487216c2b31be4adc41db8a8d5cc0c88;\n    //     lambertArray[28] = 0x47d5d3fc4a7a1b188cd3d788b5c5e9fc;\n    //     lambertArray[29] = 0x473cfce4871a2c40bc4f9e1c32b955d0;\n    //     lambertArray[30] = 0x46a771ca578ab878485810e285e31c67;\n    //     lambertArray[31] = 0x4615149718aed4c258c373dc676aa72d;\n    //     lambertArray[32] = 0x4585c8b3f8fe489c6e1833ca47871384;\n    //     lambertArray[33] = 0x44f972f174e41e5efb7e9d63c29ce735;\n    //     lambertArray[34] = 0x446ff970ba86d8b00beb05ecebf3c4dc;\n    //     lambertArray[35] = 0x43e9438ec88971812d6f198b5ccaad96;\n    //     lambertArray[36] = 0x436539d11ff7bea657aeddb394e809ef;\n    //     lambertArray[37] = 0x42e3c5d3e5a913401d86f66db5d81c2c;\n    //     lambertArray[38] = 0x4264d2395303070ea726cbe98df62174;\n    //     lambertArray[39] = 0x41e84a9a593bb7194c3a6349ecae4eea;\n    //     lambertArray[40] = 0x416e1b785d13eba07a08f3f18876a5ab;\n    //     lambertArray[41] = 0x40f6322ff389d423ba9dd7e7e7b7e809;\n    //     lambertArray[42] = 0x40807cec8a466880ecf4184545d240a4;\n    //     lambertArray[43] = 0x400cea9ce88a8d3ae668e8ea0d9bf07f;\n    //     lambertArray[44] = 0x3f9b6ae8772d4c55091e0ed7dfea0ac1;\n    //     lambertArray[45] = 0x3f2bee253fd84594f54bcaafac383a13;\n    //     lambertArray[46] = 0x3ebe654e95208bb9210c575c081c5958;\n    //     lambertArray[47] = 0x3e52c1fc5665635b78ce1f05ad53c086;\n    //     lambertArray[48] = 0x3de8f65ac388101ddf718a6f5c1eff65;\n    //     lambertArray[49] = 0x3d80f522d59bd0b328ca012df4cd2d49;\n    //     lambertArray[50] = 0x3d1ab193129ea72b23648a161163a85a;\n    //     lambertArray[51] = 0x3cb61f68d32576c135b95cfb53f76d75;\n    //     lambertArray[52] = 0x3c5332d9f1aae851a3619e77e4cc8473;\n    //     lambertArray[53] = 0x3bf1e08edbe2aa109e1525f65759ef73;\n    //     lambertArray[54] = 0x3b921d9cff13fa2c197746a3dfc4918f;\n    //     lambertArray[55] = 0x3b33df818910bfc1a5aefb8f63ae2ac4;\n    //     lambertArray[56] = 0x3ad71c1c77e34fa32a9f184967eccbf6;\n    //     lambertArray[57] = 0x3a7bc9abf2c5bb53e2f7384a8a16521a;\n    //     lambertArray[58] = 0x3a21dec7e76369783a68a0c6385a1c57;\n    //     lambertArray[59] = 0x39c9525de6c9cdf7c1c157ca4a7a6ee3;\n    //     lambertArray[60] = 0x39721bad3dc85d1240ff0190e0adaac3;\n    //     lambertArray[61] = 0x391c324344d3248f0469eb28dd3d77e0;\n    //     lambertArray[62] = 0x38c78df7e3c796279fb4ff84394ab3da;\n    //     lambertArray[63] = 0x387426ea4638ae9aae08049d3554c20a;\n    //     lambertArray[64] = 0x3821f57dbd2763256c1a99bbd2051378;\n    //     lambertArray[65] = 0x37d0f256cb46a8c92ff62fbbef289698;\n    //     lambertArray[66] = 0x37811658591ffc7abdd1feaf3cef9b73;\n    //     lambertArray[67] = 0x37325aa10e9e82f7df0f380f7997154b;\n    //     lambertArray[68] = 0x36e4b888cfb408d873b9a80d439311c6;\n    //     lambertArray[69] = 0x3698299e59f4bb9de645fc9b08c64cca;\n    //     lambertArray[70] = 0x364ca7a5012cb603023b57dd3ebfd50d;\n    //     lambertArray[71] = 0x36022c928915b778ab1b06aaee7e61d4;\n    //     lambertArray[72] = 0x35b8b28d1a73dc27500ffe35559cc028;\n    //     lambertArray[73] = 0x357033e951fe250ec5eb4e60955132d7;\n    //     lambertArray[74] = 0x3528ab2867934e3a21b5412e4c4f8881;\n    //     lambertArray[75] = 0x34e212f66c55057f9676c80094a61d59;\n    //     lambertArray[76] = 0x349c66289e5b3c4b540c24f42fa4b9bb;\n    //     lambertArray[77] = 0x34579fbbd0c733a9c8d6af6b0f7d00f7;\n    //     lambertArray[78] = 0x3413bad2e712288b924b5882b5b369bf;\n    //     lambertArray[79] = 0x33d0b2b56286510ef730e213f71f12e9;\n    //     lambertArray[80] = 0x338e82ce00e2496262c64457535ba1a1;\n    //     lambertArray[81] = 0x334d26a96b373bb7c2f8ea1827f27a92;\n    //     lambertArray[82] = 0x330c99f4f4211469e00b3e18c31475ea;\n    //     lambertArray[83] = 0x32ccd87d6486094999c7d5e6f33237d8;\n    //     lambertArray[84] = 0x328dde2dd617b6665a2e8556f250c1af;\n    //     lambertArray[85] = 0x324fa70e9adc270f8262755af5a99af9;\n    //     lambertArray[86] = 0x32122f443110611ca51040f41fa6e1e3;\n    //     lambertArray[87] = 0x31d5730e42c0831482f0f1485c4263d8;\n    //     lambertArray[88] = 0x31996ec6b07b4a83421b5ebc4ab4e1f1;\n    //     lambertArray[89] = 0x315e1ee0a68ff46bb43ec2b85032e876;\n    //     lambertArray[90] = 0x31237fe7bc4deacf6775b9efa1a145f8;\n    //     lambertArray[91] = 0x30e98e7f1cc5a356e44627a6972ea2ff;\n    //     lambertArray[92] = 0x30b04760b8917ec74205a3002650ec05;\n    //     lambertArray[93] = 0x3077a75c803468e9132ce0cf3224241d;\n    //     lambertArray[94] = 0x303fab57a6a275c36f19cda9bace667a;\n    //     lambertArray[95] = 0x3008504beb8dcbd2cf3bc1f6d5a064f0;\n    //     lambertArray[96] = 0x2fd19346ed17dac61219ce0c2c5ac4b0;\n    //     lambertArray[97] = 0x2f9b7169808c324b5852fd3d54ba9714;\n    //     lambertArray[98] = 0x2f65e7e711cf4b064eea9c08cbdad574;\n    //     lambertArray[99] = 0x2f30f405093042ddff8a251b6bf6d103;\n    //     lambertArray[100] = 0x2efc931a3750f2e8bfe323edfe037574;\n    //     lambertArray[101] = 0x2ec8c28e46dbe56d98685278339400cb;\n    //     lambertArray[102] = 0x2e957fd933c3926d8a599b602379b851;\n    //     lambertArray[103] = 0x2e62c882c7c9ed4473412702f08ba0e5;\n    //     lambertArray[104] = 0x2e309a221c12ba361e3ed695167feee2;\n    //     lambertArray[105] = 0x2dfef25d1f865ae18dd07cfea4bcea10;\n    //     lambertArray[106] = 0x2dcdcee821cdc80decc02c44344aeb31;\n    //     lambertArray[107] = 0x2d9d2d8562b34944d0b201bb87260c83;\n    //     lambertArray[108] = 0x2d6d0c04a5b62a2c42636308669b729a;\n    //     lambertArray[109] = 0x2d3d6842c9a235517fc5a0332691528f;\n    //     lambertArray[110] = 0x2d0e402963fe1ea2834abc408c437c10;\n    //     lambertArray[111] = 0x2cdf91ae602647908aff975e4d6a2a8c;\n    //     lambertArray[112] = 0x2cb15ad3a1eb65f6d74a75da09a1b6c5;\n    //     lambertArray[113] = 0x2c8399a6ab8e9774d6fcff373d210727;\n    //     lambertArray[114] = 0x2c564c4046f64edba6883ca06bbc4535;\n    //     lambertArray[115] = 0x2c2970c431f952641e05cb493e23eed3;\n    //     lambertArray[116] = 0x2bfd0560cd9eb14563bc7c0732856c18;\n    //     lambertArray[117] = 0x2bd1084ed0332f7ff4150f9d0ef41a2c;\n    //     lambertArray[118] = 0x2ba577d0fa1628b76d040b12a82492fb;\n    //     lambertArray[119] = 0x2b7a5233cd21581e855e89dc2f1e8a92;\n    //     lambertArray[120] = 0x2b4f95cd46904d05d72bdcde337d9cc7;\n    //     lambertArray[121] = 0x2b2540fc9b4d9abba3faca6691914675;\n    //     lambertArray[122] = 0x2afb5229f68d0830d8be8adb0a0db70f;\n    //     lambertArray[123] = 0x2ad1c7c63a9b294c5bc73a3ba3ab7a2b;\n    //     lambertArray[124] = 0x2aa8a04ac3cbe1ee1c9c86361465dbb8;\n    //     lambertArray[125] = 0x2a7fda392d725a44a2c8aeb9ab35430d;\n    //     lambertArray[126] = 0x2a57741b18cde618717792b4faa216db;\n    //     lambertArray[127] = 0x2a2f6c81f5d84dd950a35626d6d5503a;\n    // }\n\n    /**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\n    function power(\n        uint256 _baseN,\n        uint256 _baseD,\n        uint32 _expN,\n        uint32 _expD\n    ) public view returns (uint256, uint8) {\n        require(_baseN < MAX_NUM);\n\n        uint256 baseLog;\n        uint256 base = (_baseN * FIXED_1) / _baseD;\n        if (base < OPT_LOG_MAX_VAL) {\n            baseLog = optimalLog(base);\n        } else {\n            baseLog = generalLog(base);\n        }\n\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\n        } else {\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\n            return (\n                generalExp(\n                    baseLogTimesExp >> (MAX_PRECISION - precision),\n                    precision\n                ),\n                precision\n            );\n        }\n    }\n\n    /**\n     * @dev computes log(x / FIXED_1) * FIXED_1.\n     * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n     */\n    function generalLog(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n        if (x >= FIXED_2) {\n            uint8 count = floorLog2(x / FIXED_1);\n            x >>= count; // now x < 2\n            res = count * FIXED_1;\n        }\n\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n        if (x > FIXED_1) {\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\n                x = (x * x) / FIXED_1; // now 1 < x < 4\n                if (x >= FIXED_2) {\n                    x >>= 1; // now 1 < x < 2\n                    res += ONE << (i - 1);\n                }\n            }\n        }\n\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\n    }\n\n    /**\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n     */\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\n        uint8 res = 0;\n\n        if (_n < 256) {\n            // At most 8 iterations\n            while (_n > 1) {\n                _n >>= 1;\n                res += 1;\n            }\n        } else {\n            // Exactly 8 iterations\n            for (uint8 s = 128; s > 0; s >>= 1) {\n                if (_n >= (ONE << s)) {\n                    _n >>= s;\n                    res |= s;\n                }\n            }\n        }\n\n        return res;\n    }\n\n    /**\n     * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n     * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n     * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n     */\n    function findPositionInMaxExpArray(uint256 _x)\n        internal\n        view\n        returns (uint8 pos)\n    {\n        uint8 lo = MIN_PRECISION;\n        uint8 hi = MAX_PRECISION;\n\n        while (lo + 1 < hi) {\n            uint8 mid = (lo + hi) / 2;\n            if (maxExpArray[mid] >= _x) lo = mid;\n            else hi = mid;\n        }\n\n        if (maxExpArray[hi] >= _x) return pos = hi;\n        if (maxExpArray[lo] >= _x) return pos = lo;\n\n        require(false);\n    }\n\n    /**\n     * @dev this function can be auto-generated by the script 'PrintFunctionGeneralExp.py'.\n     * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n     * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n     * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n     * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     */\n    function generalExp(uint256 _x, uint8 _precision)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 xi = _x;\n        uint256 res = 0;\n\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\n        xi = (xi * _x) >> _precision;\n        res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\n\n        return\n            res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision); // divide by 33! and then add x^1 / 1! + x^0 / 0!\n    }\n\n    /**\n     * @dev computes log(x / FIXED_1) * FIXED_1\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n     * Auto-generated via 'PrintFunctionOptimalLog.py'\n     * Detailed description:\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n     */\n    function optimalLog(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n        uint256 w;\n\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\n            res += 0x40000000000000000000000000000000;\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\n        } // add 1 / 2^1\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\n            res += 0x20000000000000000000000000000000;\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\n        } // add 1 / 2^2\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\n            res += 0x10000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\n        } // add 1 / 2^3\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\n            res += 0x08000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\n        } // add 1 / 2^4\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\n            res += 0x04000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\n        } // add 1 / 2^5\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\n            res += 0x02000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\n        } // add 1 / 2^6\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\n            res += 0x01000000000000000000000000000000;\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\n        } // add 1 / 2^7\n        if (x >= 0x808040155aabbbe9451521693554f733) {\n            res += 0x00800000000000000000000000000000;\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\n        } // add 1 / 2^8\n\n        z = y = x - FIXED_1;\n        w = (y * y) / FIXED_1;\n        res +=\n            (z * (0x100000000000000000000000000000000 - y)) /\n            0x100000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^01 / 01 - y^02 / 02\n        res +=\n            (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) /\n            0x200000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^03 / 03 - y^04 / 04\n        res +=\n            (z * (0x099999999999999999999999999999999 - y)) /\n            0x300000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^05 / 05 - y^06 / 06\n        res +=\n            (z * (0x092492492492492492492492492492492 - y)) /\n            0x400000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^07 / 07 - y^08 / 08\n        res +=\n            (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) /\n            0x500000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^09 / 09 - y^10 / 10\n        res +=\n            (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) /\n            0x600000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^11 / 11 - y^12 / 12\n        res +=\n            (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) /\n            0x700000000000000000000000000000000;\n        z = (z * w) / FIXED_1; // add y^13 / 13 - y^14 / 14\n        res +=\n            (z * (0x088888888888888888888888888888888 - y)) /\n            0x800000000000000000000000000000000; // add y^15 / 15 - y^16 / 16\n\n        return res;\n    }\n\n    /**\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\n     * auto-generated via 'PrintFunctionOptimalExp.py'\n     * Detailed description:\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\n     * - The exponentiation of each binary exponent is given (pre-calculated)\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\n     */\n    function optimalExp(uint256 x) internal pure returns (uint256) {\n        uint256 res = 0;\n\n        uint256 y;\n        uint256 z;\n\n        z = y = x % 0x10000000000000000000000000000000; // get the input modulo 2^(-3)\n        z = (z * y) / FIXED_1;\n        res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n        z = (z * y) / FIXED_1;\n        res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n        if ((x & 0x010000000000000000000000000000000) != 0)\n            res =\n                (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) /\n                0x18ebef9eac820ae8682b9793ac6d1e776; // multiply by e^2^(-3)\n        if ((x & 0x020000000000000000000000000000000) != 0)\n            res =\n                (res * 0x18ebef9eac820ae8682b9793ac6d1e778) /\n                0x1368b2fc6f9609fe7aceb46aa619baed4; // multiply by e^2^(-2)\n        if ((x & 0x040000000000000000000000000000000) != 0)\n            res =\n                (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) /\n                0x0bc5ab1b16779be3575bd8f0520a9f21f; // multiply by e^2^(-1)\n        if ((x & 0x080000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) /\n                0x0454aaa8efe072e7f6ddbab84b40a55c9; // multiply by e^2^(+0)\n        if ((x & 0x100000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) /\n                0x00960aadc109e7a3bf4578099615711ea; // multiply by e^2^(+1)\n        if ((x & 0x200000000000000000000000000000000) != 0)\n            res =\n                (res * 0x00960aadc109e7a3bf4578099615711d7) /\n                0x0002bf84208204f5977f9a8cf01fdce3d; // multiply by e^2^(+2)\n        if ((x & 0x400000000000000000000000000000000) != 0)\n            res =\n                (res * 0x0002bf84208204f5977f9a8cf01fdc307) /\n                0x0000003c6ab775dd0b95b4cbee7e65d11; // multiply by e^2^(+3)\n\n        return res;\n    }\n\n    /**\n     * @dev computes W(x / FIXED_1) / (x / FIXED_1) * FIXED_1\n     */\n    // function lowerStake(uint256 _x) internal view returns (uint256 pos) {\n    //     if (_x <= LAMBERT_CONV_RADIUS) return pos = lambertPos1(_x);\n    //     if (_x <= LAMBERT_POS2_MAXVAL) return pos = lambertPos2(_x);\n    //     if (_x <= LAMBERT_POS3_MAXVAL) return pos = lambertPos3(_x);\n    //     require(false);\n    // }\n\n    /**\n     * @dev computes W(-x / FIXED_1) / (-x / FIXED_1) * FIXED_1\n     */\n    // function higherStake(uint256 _x) internal pure returns (uint256) {\n    //     if (_x <= LAMBERT_CONV_RADIUS) return lambertNeg1(_x);\n    //     return (FIXED_1 * FIXED_1) / _x;\n    // }\n\n    /**\n     * @dev computes W(x / FIXED_1) / (x / FIXED_1) * FIXED_1\n     * input range: 1 <= x <= 1 / e * FIXED_1\n     * auto-generated via 'PrintFunctionLambertPos1.py'\n     */\n    // function lambertPos1(uint256 _x) internal pure returns (uint256) {\n    //     uint256 xi = _x;\n    //     uint256 res = (FIXED_1 - _x) * 0xde1bc4d19efcac82445da75b00000000; // x^(1-1) * (34! * 1^(1-1) / 1!) - x^(2-1) * (34! * 2^(2-1) / 2!)\n\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000000014d29a73a6e7b02c3668c7b0880000000; // add x^(03-1) * (34! * 03^(03-1) / 03!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x0000000002504a0cd9a7f7215b60f9be4800000000; // sub x^(04-1) * (34! * 04^(04-1) / 04!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000000484d0a1191c0ead267967c7a4a0000000; // add x^(05-1) * (34! * 05^(05-1) / 05!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x00000000095ec580d7e8427a4baf26a90a00000000; // sub x^(06-1) * (34! * 06^(06-1) / 06!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000001440b0be1615a47dba6e5b3b1f10000000; // add x^(07-1) * (34! * 07^(07-1) / 07!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x000000002d207601f46a99b4112418400000000000; // sub x^(08-1) * (34! * 08^(08-1) / 08!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000066ebaac4c37c622dd8288a7eb1b2000000; // add x^(09-1) * (34! * 09^(09-1) / 09!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x00000000ef17240135f7dbd43a1ba10cf200000000; // sub x^(10-1) * (34! * 10^(10-1) / 10!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000233c33c676a5eb2416094a87b3657000000; // add x^(11-1) * (34! * 11^(11-1) / 11!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x0000000541cde48bc0254bed49a9f8700000000000; // sub x^(12-1) * (34! * 12^(12-1) / 12!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000cae1fad2cdd4d4cb8d73abca0d19a400000; // add x^(13-1) * (34! * 13^(13-1) / 13!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x0000001edb2aa2f760d15c41ceedba956400000000; // sub x^(14-1) * (34! * 14^(14-1) / 14!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000004ba8d20d2dabd386c9529659841a2e200000; // add x^(15-1) * (34! * 15^(15-1) / 15!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x000000bac08546b867cdaa20000000000000000000; // sub x^(16-1) * (34! * 16^(16-1) / 16!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000001cfa8e70c03625b9db76c8ebf5bbf24820000; // add x^(17-1) * (34! * 17^(17-1) / 17!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x000004851d99f82060df265f3309b26f8200000000; // sub x^(18-1) * (34! * 18^(18-1) / 18!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000b550d19b129d270c44f6f55f027723cbb0000; // add x^(19-1) * (34! * 19^(19-1) / 19!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x00001c877dadc761dc272deb65d4b0000000000000; // sub x^(20-1) * (34! * 20^(20-1) / 20!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000048178ece97479f33a77f2ad22a81b64406c000; // add x^(21-1) * (34! * 21^(21-1) / 21!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x0000b6ca8268b9d810fedf6695ef2f8a6c00000000; // sub x^(22-1) * (34! * 22^(22-1) / 22!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0001d0e76631a5b05d007b8cb72a7c7f11ec36e000; // add x^(23-1) * (34! * 23^(23-1) / 23!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x0004a1c37bd9f85fd9c6c780000000000000000000; // sub x^(24-1) * (34! * 24^(24-1) / 24!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000bd8369f1b702bf491e2ebfcee08250313b65400; // add x^(25-1) * (34! * 25^(25-1) / 25!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x001e5c7c32a9f6c70ab2cb59d9225764d400000000; // sub x^(26-1) * (34! * 26^(26-1) / 26!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x004dff5820e165e910f95120a708e742496221e600; // add x^(27-1) * (34! * 27^(27-1) / 27!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x00c8c8f66db1fced378ee50e536000000000000000; // sub x^(28-1) * (34! * 28^(28-1) / 28!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0205db8dffff45bfa2938f128f599dbf16eb11d880; // add x^(29-1) * (34! * 29^(29-1) / 29!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x053a044ebd984351493e1786af38d39a0800000000; // sub x^(30-1) * (34! * 30^(30-1) / 30!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0d86dae2a4cc0f47633a544479735869b487b59c40; // add x^(31-1) * (34! * 31^(31-1) / 31!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0x231000000000000000000000000000000000000000; // sub x^(32-1) * (34! * 32^(32-1) / 32!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x5b0485a76f6646c2039db1507cdd51b08649680822; // add x^(33-1) * (34! * 33^(33-1) / 33!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res -= xi * 0xec983c46c49545bc17efa6b5b0055e242200000000; // sub x^(34-1) * (34! * 34^(34-1) / 34!)\n\n    //     return res / 0xde1bc4d19efcac82445da75b00000000; // divide by 34!\n    // }\n\n    /**\n     * @dev computes W(x / FIXED_1) / (x / FIXED_1) * FIXED_1\n     * input range: LAMBERT_CONV_RADIUS + 1 <= x <= LAMBERT_POS2_MAXVAL\n     */\n    // function lambertPos2(uint256 _x) internal view returns (uint256) {\n    //     uint256 x = _x - LAMBERT_CONV_RADIUS - 1;\n    //     uint256 i = x / LAMBERT_POS2_SAMPLE;\n    //     uint256 a = LAMBERT_POS2_SAMPLE * i;\n    //     uint256 b = LAMBERT_POS2_SAMPLE * (i + 1);\n    //     uint256 c = lambertArray[i];\n    //     uint256 d = lambertArray[i + 1];\n    //     return (c * (b - x) + d * (x - a)) / LAMBERT_POS2_SAMPLE;\n    // }\n\n    // /**\n    //  * @dev computes W(x / FIXED_1) / (x / FIXED_1) * FIXED_1\n    //  * input range: LAMBERT_POS2_MAXVAL + 1 <= x <= LAMBERT_POS3_MAXVAL\n    //  */\n    // function lambertPos3(uint256 _x) internal pure returns (uint256) {\n    //     uint256 l1 = _x < OPT_LOG_MAX_VAL ? optimalLog(_x) : generalLog(_x);\n    //     uint256 l2 = l1 < OPT_LOG_MAX_VAL ? optimalLog(l1) : generalLog(l1);\n    //     return ((l1 - l2 + (l2 * FIXED_1) / l1) * FIXED_1) / _x;\n    // }\n\n    /**\n     * @dev computes W(-x / FIXED_1) / (-x / FIXED_1) * FIXED_1\n     * input range: 1 <= x <= 1 / e * FIXED_1\n     * auto-generated via 'PrintFunctionLambertNeg1.py'\n     */\n    // function lambertNeg1(uint256 _x) internal pure returns (uint256) {\n    //     uint256 xi = _x;\n    //     uint256 res = 0;\n\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000000014d29a73a6e7b02c3668c7b0880000000; // add x^(03-1) * (34! * 03^(03-1) / 03!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000002504a0cd9a7f7215b60f9be4800000000; // add x^(04-1) * (34! * 04^(04-1) / 04!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000000484d0a1191c0ead267967c7a4a0000000; // add x^(05-1) * (34! * 05^(05-1) / 05!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000000095ec580d7e8427a4baf26a90a00000000; // add x^(06-1) * (34! * 06^(06-1) / 06!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000001440b0be1615a47dba6e5b3b1f10000000; // add x^(07-1) * (34! * 07^(07-1) / 07!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000002d207601f46a99b4112418400000000000; // add x^(08-1) * (34! * 08^(08-1) / 08!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000066ebaac4c37c622dd8288a7eb1b2000000; // add x^(09-1) * (34! * 09^(09-1) / 09!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000000ef17240135f7dbd43a1ba10cf200000000; // add x^(10-1) * (34! * 10^(10-1) / 10!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000233c33c676a5eb2416094a87b3657000000; // add x^(11-1) * (34! * 11^(11-1) / 11!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000541cde48bc0254bed49a9f8700000000000; // add x^(12-1) * (34! * 12^(12-1) / 12!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000000cae1fad2cdd4d4cb8d73abca0d19a400000; // add x^(13-1) * (34! * 13^(13-1) / 13!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000001edb2aa2f760d15c41ceedba956400000000; // add x^(14-1) * (34! * 14^(14-1) / 14!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000004ba8d20d2dabd386c9529659841a2e200000; // add x^(15-1) * (34! * 15^(15-1) / 15!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000000bac08546b867cdaa20000000000000000000; // add x^(16-1) * (34! * 16^(16-1) / 16!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000001cfa8e70c03625b9db76c8ebf5bbf24820000; // add x^(17-1) * (34! * 17^(17-1) / 17!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000004851d99f82060df265f3309b26f8200000000; // add x^(18-1) * (34! * 18^(18-1) / 18!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00000b550d19b129d270c44f6f55f027723cbb0000; // add x^(19-1) * (34! * 19^(19-1) / 19!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00001c877dadc761dc272deb65d4b0000000000000; // add x^(20-1) * (34! * 20^(20-1) / 20!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000048178ece97479f33a77f2ad22a81b64406c000; // add x^(21-1) * (34! * 21^(21-1) / 21!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0000b6ca8268b9d810fedf6695ef2f8a6c00000000; // add x^(22-1) * (34! * 22^(22-1) / 22!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0001d0e76631a5b05d007b8cb72a7c7f11ec36e000; // add x^(23-1) * (34! * 23^(23-1) / 23!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0004a1c37bd9f85fd9c6c780000000000000000000; // add x^(24-1) * (34! * 24^(24-1) / 24!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x000bd8369f1b702bf491e2ebfcee08250313b65400; // add x^(25-1) * (34! * 25^(25-1) / 25!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x001e5c7c32a9f6c70ab2cb59d9225764d400000000; // add x^(26-1) * (34! * 26^(26-1) / 26!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x004dff5820e165e910f95120a708e742496221e600; // add x^(27-1) * (34! * 27^(27-1) / 27!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x00c8c8f66db1fced378ee50e536000000000000000; // add x^(28-1) * (34! * 28^(28-1) / 28!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0205db8dffff45bfa2938f128f599dbf16eb11d880; // add x^(29-1) * (34! * 29^(29-1) / 29!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x053a044ebd984351493e1786af38d39a0800000000; // add x^(30-1) * (34! * 30^(30-1) / 30!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x0d86dae2a4cc0f47633a544479735869b487b59c40; // add x^(31-1) * (34! * 31^(31-1) / 31!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x231000000000000000000000000000000000000000; // add x^(32-1) * (34! * 32^(32-1) / 32!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0x5b0485a76f6646c2039db1507cdd51b08649680822; // add x^(33-1) * (34! * 33^(33-1) / 33!)\n    //     xi = (xi * _x) / FIXED_1;\n    //     res += xi * 0xec983c46c49545bc17efa6b5b0055e242200000000; // add x^(34-1) * (34! * 34^(34-1) / 34!)\n\n    //     return res / 0xde1bc4d19efcac82445da75b00000000 + _x + FIXED_1; // divide by 34! and then add x^(2-1) * (34! * 2^(2-1) / 2!) + x^(1-1) * (34! * 1^(1-1) / 1!)\n    // }\n\n    /**\n     * @dev computes the weights based on \"W(log(hi / lo) * tq / rp) * tq / rp\", where \"W\" is a variation of the Lambert W function.\n     */\n    // function balancedWeightsByStake(\n    //     uint256 _hi,\n    //     uint256 _lo,\n    //     uint256 _tq,\n    //     uint256 _rp,\n    //     bool _lowerStake\n    // ) public view returns (uint32, uint32) {\n    //     (_tq, _rp) = safeFactors(_tq, _rp);\n    //     uint256 f = _hi.mul(FIXED_1) / _lo;\n    //     uint256 g = f < OPT_LOG_MAX_VAL ? optimalLog(f) : generalLog(f);\n    //     uint256 x = g.mul(_tq) / _rp;\n    //     uint256 y = _lowerStake ? lowerStake(x) : higherStake(x);\n    //     return normalizedWeights(y.mul(_tq), _rp.mul(FIXED_1));\n    // }\n\n    /**\n     * @dev reduces \"a\" and \"b\" while maintaining their ratio.\n     */\n    function safeFactors(uint256 _a, uint256 _b)\n        public\n        pure\n        returns (uint256, uint256)\n    {\n        if (_a <= FIXED_2 && _b <= FIXED_2) return (_a, _b);\n        if (_a < FIXED_2) return ((_a * FIXED_2) / _b, FIXED_2);\n        if (_b < FIXED_2) return (FIXED_2, (_b * FIXED_2) / _a);\n        uint256 c = _a > _b ? _a : _b;\n        uint256 n = floorLog2(c / FIXED_1);\n        return (_a >> n, _b >> n);\n    }\n\n    /**\n     * @dev computes \"MAX_WEIGHT * a / (a + b)\" and \"MAX_WEIGHT * b / (a + b)\".\n     */\n    function normalizedWeights(uint256 _a, uint256 _b)\n        public\n        pure\n        returns (uint32, uint32)\n    {\n        if (_a <= _b) return accurateWeights(_a, _b);\n        (uint32 y, uint32 x) = accurateWeights(_b, _a);\n        return (x, y);\n    }\n\n    /**\n     * @dev computes \"MAX_WEIGHT * a / (a + b)\" and \"MAX_WEIGHT * b / (a + b)\", assuming that \"a <= b\".\n     */\n    function accurateWeights(uint256 _a, uint256 _b)\n        public\n        pure\n        returns (uint32, uint32)\n    {\n        if (_a > MAX_UNF_WEIGHT) {\n            uint256 c = _a / (MAX_UNF_WEIGHT + 1) + 1;\n            _a /= c;\n            _b /= c;\n        }\n        uint256 x = roundDiv(_a * MAX_WEIGHT, _a.add(_b));\n        uint256 y = MAX_WEIGHT - x;\n        return (uint32(x), uint32(y));\n    }\n\n    /**\n     * @dev computes the nearest integer to a given quotient without overflowing or underflowing.\n     */\n    function roundDiv(uint256 _n, uint256 _d) internal pure returns (uint256) {\n        return _n / _d + (_n % _d) / (_d - _d / 2);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Strategy/StrategyHub.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\n//Finish this today.\n/**\n * What all does this need to do?\n * Receive funds and send them where they should go\n * Determine what percentage goes where\n * add and remove strategies\n */\n\npragma solidity 0.8.7;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IStrategyHub} from \"../interfaces/IStrategyHub.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract StrategyHub is IStrategyHub, Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    error NotAStrategy();\n    error StrategyCooldown();\n    error NotOwner();\n    error AllowanceFailed();\n\n    mapping(address => uint16) percentages;\n    mapping(address => uint256) cooldown;\n    mapping(address => bool) strategies;\n    mapping(address => mapping(IERC20 => bool)) acceptableTokens;\n\n    address public administrator;\n    bool public adminRemoved;\n\n    constructor() {\n        administrator = msg.sender;\n    }\n\n    function transferToStrategy(IERC20 _token, address _strategy)\n        external\n        override\n        acceptableTransfer(_strategy, _token)\n        nonReentrant\n    {\n        if (strategies[_strategy] != true) revert NotAStrategy();\n        if (cooldown[_strategy] > block.timestamp) revert StrategyCooldown();\n        cooldown[_strategy] = block.timestamp + 2 days;\n        uint16 percentage = percentages[_strategy];\n        uint256 amount = (IERC20(_token).balanceOf(address(this)) *\n            percentage) / 1000;\n\n        IERC20(_token).safeTransfer(_strategy, amount);\n        emit TransferToStrategy(_strategy, _token, amount);\n    }\n\n    function updatePercentage(uint16 _percentage, address _destinationContract)\n        external\n        override\n        onlyOwners\n    {\n        require(_percentage > 0 && _percentage <= 1000, \"Invalid Percentages\");\n        percentages[_destinationContract] = _percentage;\n        emit PercentageChanged(_destinationContract, _percentage);\n    }\n\n    function addStrategies(address _strategy) external override onlyOwners {\n        strategies[_strategy] = true;\n        emit StrategyAdded(_strategy);\n    }\n\n    function removeStrategy(address _strategy) external override onlyOwners {\n        delete strategies[_strategy];\n        delete percentages[_strategy];\n        emit StrategyRemoved(_strategy);\n    }\n\n    function addTransferableTokens(address _strategy, IERC20 _token)\n        external\n        onlyOwners\n    {\n        acceptableTokens[_strategy][_token] = true;\n        emit TransferableToken(_strategy, _token);\n    }\n\n    function removeTransferableTokens(address _strategy, IERC20 _token)\n        external\n        onlyOwners\n    {\n        acceptableTokens[_strategy][_token] = false;\n    }\n\n    function changeAdmin(address _administrator) external onlyOwners {\n        require(adminRemoved == false, \"admin removed\");\n        administrator = _administrator;\n    }\n\n    function removeAdmin() external onlyOwner {\n        administrator = address(0);\n    }\n\n    function checkCooldown(address _strategy) external view returns (uint256) {\n        uint256 time = cooldown[_strategy];\n        return time;\n    }\n\n    modifier acceptableTransfer(address _strategy, IERC20 _token) {\n        if (acceptableTokens[_strategy][_token] != true) revert NotAStrategy();\n        _;\n    }\n\n    modifier onlyOwners() {\n        if (msg.sender != administrator || msg.sender != owner())\n            revert NotOwner();\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IStrategyHub.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStrategyHub {\n    event StrategyAdded(address indexed _strategy);\n    event PercentageChanged(address indexed _strategy, uint16 _percentage);\n    event StrategyRemoved(address indexed _strategy);\n    event TransferableToken(address indexed _strategy, IERC20 _token);\n    event TransferToStrategy(\n        address indexed _strategy,\n        IERC20 _token,\n        uint256 amount\n    );\n\n    function transferToStrategy(IERC20 _token, address _strategy) external;\n\n    function updatePercentage(uint16 _percentage, address _destinationContract)\n        external;\n\n    function addStrategies(address _strategy) external;\n\n    function removeStrategy(address _strategy) external;\n}\n"
    },
    "contracts/Strategy/ArbitrumStrategies/GMXStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport {IRewardRouterV2} from \"../../interfaces/IRewardRouterV2.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract GMXStrategy is Ownable {\n    IRewardRouterV2 rewardRouterV2;\n\n    using SafeERC20 for IERC20;\n\n    address public administrator;\n    address public yieldDistributor;\n    address public constant ES_GMX = 0xf42Ae1D54fd613C9bb14810b0588FaAa09a426cA;\n    address public immutable weth;\n    uint256 public claimable;\n    uint256 public compounded;\n    bool public adminRemoved = false;\n\n    error NotOwner();\n    error NotEnoughYield();\n    error TooSoon();\n    error AdminRemoved();\n\n    event YieldTransfered(address indexed _caller, uint256 _amount);\n    event EsGMXStaked(address indexed _caller, uint256 _amount);\n    event Unstaked(address indexed _caller, uint256 _amount);\n    event GlpMinted(\n        address indexed _caller,\n        address indexed _token,\n        uint256 _amount,\n        uint256 _glpAmount\n    );\n\n    constructor(address _rewardRouterV2, address _weth) {\n        rewardRouterV2 = IRewardRouterV2(_rewardRouterV2);\n        administrator = msg.sender;\n        weth = _weth;\n    }\n\n    function stakeGMXRewards() external {\n        require(\n            ERC20(ES_GMX).balanceOf(address(this)) > 0,\n            \"O balance of contract\"\n        );\n        uint256 amount = ERC20(ES_GMX).balanceOf(address(this));\n        rewardRouterV2.stakeEsGmx(amount);\n        emit EsGMXStaked(msg.sender, amount);\n    }\n\n    function mintGLP(\n        address _token,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external {\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\n        uint256 glpAmount = rewardRouterV2.mintAndStakeGlp(\n            _token,\n            _amount,\n            _minUsdg,\n            _minGlp\n        );\n        emit GlpMinted(msg.sender, _token, _amount, glpAmount);\n    }\n\n    function sellGlp(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut\n    ) external onlyOwners {\n        rewardRouterV2.unstakeAndRedeemGlp(\n            _tokenOut,\n            _glpAmount,\n            _minOut,\n            address(this)\n        );\n    }\n\n    function unstake(uint256 _amount) external onlyOwners {\n        rewardRouterV2.unstakeEsGmx(_amount);\n        emit Unstaked(msg.sender, _amount);\n    }\n\n    function claimRewards() external {\n        if (claimable > block.timestamp) revert TooSoon();\n        rewardRouterV2.claim();\n        claimable = block.timestamp + 1 days;\n    }\n\n    function removeAdmin() external onlyOwner {\n        administrator = address(0);\n    }\n\n    function replaceAdmin(address newAdmin) external onlyOwners {\n        if (adminRemoved != false) revert AdminRemoved();\n        administrator = newAdmin;\n    }\n\n    function compound() external {\n        if (compounded > block.timestamp) revert TooSoon();\n        rewardRouterV2.compound();\n        compounded = block.timestamp + 1 days;\n    }\n\n    function setYieldDistributor(address _yield) external onlyOwners {\n        yieldDistributor = _yield;\n    }\n\n    function transferYield() external {\n        if (IERC20(weth).balanceOf(address(this)) <= 0) revert NotEnoughYield();\n        uint256 amount = IERC20(weth).balanceOf(address(this));\n        IERC20(weth).safeTransfer(yieldDistributor, amount);\n        emit YieldTransfered(msg.sender, amount);\n    }\n\n    modifier onlyOwners() {\n        if (msg.sender != administrator || msg.sender != owner())\n            revert NotOwner();\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IRewardRouterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\ninterface IRewardRouterV2 {\n    function stakeGmx(uint256 _amount) external;\n\n    function stakeEsGmx(uint256 _amount) external;\n\n    function unstakeGmx(uint256 _amount) external;\n\n    function unstakeEsGmx(uint256 _amount) external;\n\n    function mintAndStakeGlp(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minGlp\n    ) external returns (uint256);\n\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp)\n        external\n        payable\n        returns (uint256);\n\n    function unstakeAndRedeemGlp(\n        address _tokenOut,\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function unstakeAndRedeemGlpETH(\n        uint256 _glpAmount,\n        uint256 _minOut,\n        address payable _receiver\n    ) external returns (uint256);\n\n    function claim() external;\n\n    function claimEsGmx() external;\n\n    function claimFees() external;\n\n    function compound() external;\n\n    function handleRewards(\n        bool _shouldClaimGmx,\n        bool _shouldStakeGmx,\n        bool _shouldClaimEsGmx,\n        bool _shouldStakeEsGmx,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth\n    ) external;\n\n    function signalTransfer(address _receiver) external;\n\n    function acceptTransfer(address _sender) external;\n\n    function _compound(address _account) external;\n\n    function _compoundGmx(address _account) external;\n\n    function _compoundGlp(address _account) external;\n\n    function _stakeGmx(\n        address _fundingAccount,\n        address _account,\n        address _token,\n        uint256 _amount\n    ) external;\n\n    function _unstakeGmx(\n        address _account,\n        address _token,\n        uint256 _amount,\n        bool _shouldReduceBnGmx\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/Strategy/ArbitrumStrategies/MyceliumStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n/**\nWhat will this strategy do?\n\nMint and stake GLP, stake esGMX, claim rewards, unstake, send yield to where it needs to go.\nGo through the mycelium strategy today and see how similar it is\nLook into compounding \n */\n\nimport \"../../interfaces/IMyceliumStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MyceliumStrategy {\n    IMyceliumStrategy mycelium;\n\n    event StakeMlp(address account, uint256 amount);\n\n    constructor(address _mycelium) {\n        mycelium = IMyceliumStrategy(_mycelium);\n    }\n\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minMlp\n    ) external {\n        uint256 amountRecieved = mycelium.mintAndStakeMlp(\n            _token,\n            _amount,\n            _minUsdg,\n            _minMlp\n        );\n        emit StakeMlp(msg.sender, amountRecieved);\n    }\n\n    function withdraw(\n        address _tokenOut,\n        uint256 _mlpAmount,\n        uint256 _minOut\n    ) external {\n        mycelium.unstakeAndRedeemMlp(\n            _tokenOut,\n            _mlpAmount,\n            _minOut,\n            address(this)\n        );\n    }\n\n    function claimRewards() external {\n        mycelium.claim();\n    }\n\n    function claimEsMYC() external {\n        mycelium.claimEsMyc();\n    }\n\n    function claimRewardFees() external {\n        mycelium.claimFees();\n    }\n}\n"
    },
    "contracts/interfaces/IMyceliumStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\ninterface IMyceliumStrategy {\n    event StakeMyc(address account, address token, uint256 amount);\n    event UnstakeMyc(address account, address token, uint256 amount);\n\n    event StakeMlp(address account, uint256 amount);\n    event UnstakeMlp(address account, uint256 amount);\n\n    // to help users who accidentally send their tokens to this contract\n\n    function stakeMyc(uint256 _amount) external;\n\n    function stakeEsMyc(uint256 _amount) external;\n\n    function unstakeMyc(uint256 _amount) external;\n\n    function unstakeEsMyc(uint256 _amount) external;\n\n    function mintAndStakeMlp(\n        address _token,\n        uint256 _amount,\n        uint256 _minUsdg,\n        uint256 _minMlp\n    ) external returns (uint256);\n\n    function mintAndStakeMlpETH(uint256 _minUsdg, uint256 _minMlp)\n        external\n        payable\n        returns (uint256);\n\n    function unstakeAndRedeemMlp(\n        address _tokenOut,\n        uint256 _mlpAmount,\n        uint256 _minOut,\n        address _receiver\n    ) external returns (uint256);\n\n    function unstakeAndRedeemMlpETH(\n        uint256 _mlpAmount,\n        uint256 _minOut,\n        address payable _receiver\n    ) external returns (uint256);\n\n    function claim() external;\n\n    function claimEsMyc() external;\n\n    function claimFees() external;\n\n    function compound() external;\n\n    function handleRewards(\n        bool _shouldClaimMyc,\n        bool _shouldStakeMyc,\n        bool _shouldClaimEsMyc,\n        bool _shouldStakeEsMyc,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth,\n        bool _shouldBuyMlpWithWeth\n    ) external;\n\n    function signalTransfer(address _receiver) external;\n\n    function acceptTransfer(address _sender) external;\n\n    function _validateReceiver(address _receiver) external view;\n\n    function _compound(address _account) external;\n\n    function _compoundMyc(address _account) external;\n\n    function _compoundMlp(address _account) external;\n\n    function _stakeMyc(\n        address _fundingAccount,\n        address _account,\n        address _token,\n        uint256 _amount\n    ) external;\n\n    function _unstakeMyc(\n        address _account,\n        address _token,\n        uint256 _amount,\n        bool _shouldReduceBnMyc\n    ) external;\n}\n"
    },
    "contracts/Mugen/YieldDistributor.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\n//Need to make theIERC4626 interface\n\npragma solidity 0.8.7;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC4626} from \"../interfaces/IERC4626.sol\";\n\ncontract YieldDistributor is Ownable {\n    using SafeERC20 for IERC20;\n    address stakingContract;\n\n    error RewardsToHigh();\n    error RewardsToLow();\n    error AdminRemoved();\n\n    address public immutable weth;\n    address public immutable teamfund;\n    address public administrator;\n    bool public adminRemoved = false;\n\n    event RewardsDistributed(address indexed _caller, uint256 _rewards);\n    event TeamPaid(address indexed _caller, uint256 _teamPercent);\n\n    constructor(address _teamFund, address _weth) {\n        teamfund = _teamFund;\n        weth = _weth;\n        administrator = msg.sender;\n    }\n\n    function transferRewards() external payable {\n        require(\n            address(stakingContract) != address(0),\n            \"staking contract not set\"\n        );\n        if (IERC20(weth).balanceOf(address(this)) < 5 * 1e18)\n            revert RewardsToLow();\n        (uint256 team, uint256 reward) = calculateRewards();\n        ERC20(weth).approve(address(stakingContract), reward);\n        IERC20(weth).safeTransfer(teamfund, team);\n        IERC4626(stakingContract).issuanceRate(reward);\n        emit RewardsDistributed(msg.sender, reward);\n        emit TeamPaid(msg.sender, team);\n    }\n\n    function calculateRewards() internal view returns (uint256, uint256) {\n        uint256 currentRewards = IERC20(weth).balanceOf(address(this));\n        uint256 teamPercent = (currentRewards * 100) / 1000;\n        uint256 rewards = (currentRewards * 900) / 1000;\n        if (teamPercent + rewards > IERC20(weth).balanceOf(address(this)))\n            revert RewardsToHigh();\n        return (teamPercent, rewards);\n    }\n\n    function setStaking(address _address) external onlyOwners {\n        stakingContract = _address;\n    }\n\n    function setAdministrator(address newAdmin) external onlyOwners {\n        if (adminRemoved != false) revert AdminRemoved();\n        administrator = newAdmin;\n    }\n\n    function removeAdmin() external onlyOwner {\n        administrator = address(0);\n        adminRemoved = true;\n    }\n\n    modifier onlyOwners() {\n        require(\n            msg.sender == owner() || msg.sender == administrator,\n            \"not the owner\"\n        );\n        _;\n    }\n}\n"
    },
    "contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(\n        address indexed _caller,\n        address indexed caller,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    event IssuanceParamsUpdated(uint256 freeAssets_, uint256 issuanceRate_);\n\n    event RewardDeposit(address indexed depositer_, uint256 rewardAssets_);\n\n    event RewardsClaimed(address indexed user, uint256 indexed amount);\n\n    /**\n     *  @dev   `owner_` has updated the RDT vesting schedule to end at `vestingPeriodFinish_`.\n     *  @param owner_               The current RDT owner.\n     *  @param vestingPeriodFinish_ When the unvested balance will finish vesting.\n     */\n    event VestingScheduleUpdated(\n        address indexed owner_,\n        uint256 vestingPeriodFinish_\n    );\n\n    event Withdraw(\n        address indexed caller,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets()\n        external\n        view\n        returns (uint256 totalManagedMugen, uint256 totalManagedReward);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares)\n        external\n        view\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver)\n        external\n        view\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver)\n        external\n        returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver)\n        external\n        view\n        returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver)\n        external\n        returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner)\n        external\n        view\n        returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets)\n        external\n        view\n        returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares)\n        external\n        view\n        returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(\n        uint256 shares,\n        address receiver,\n        address owner\n    ) external returns (uint256 assets);\n\n    function issuanceRate(uint256 _rewards) external;\n}\n"
    },
    "contracts/Strategy/ArbitrumStrategies/JonesStrategy.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n/**\n What does this strategy do?\n\n Allows for assets to be placed into the vaults\n Buy jAssets off of dexes\n Add leverage through rari if desired\n Claim rewards \n Withdraw assets \n */\n\ncontract JonesStrategy {\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}